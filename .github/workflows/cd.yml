name: Continuous Deployment

on:
  push:
    branches:
      - master

env:
  HELM_VERSION: "v2.16.3"

jobs:
  staging-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: "Stage 0: Checkout repo"
        uses: actions/checkout@v2

      - name: "Stage 0: Setup Python 3.6"
        uses: actions/setup-python@v1
        with:
          python-version: 3.6

      - name: "Stage 0: Cache pip dependencies"
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: "Stage 1: Install dependencies"
        run: |
          pip install --upgrade setuptools pip
          pip install --upgrade -r requirements.txt

      - name: "Stage 1: Install gcloud SDK"
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master

      - name: "Stage 1: Install kubectl"
        uses: azure/setup-kubectl@v1

      - name: "Stage 1: Install helm"
        run: |
          curl -L https://storage.googleapis.com/kubernetes-helm/helm-${HELM_VERSION}-linux-amd64.tar.gz | tar --directory ${HOME} --extract --gzip --file -
          sudo mv ${HOME}/linux-amd64/helm /usr/local/bin/helm

      - name: "Stage 2: Unlock git-crypt secrets"
        uses: sliteteam/github-action-git-crypt-unlock@1.0.2
        env:
          GIT_CRYPT_KEY: ${{ secrets.GIT_CRYPT_KEY }}

      - name: "Stage 2: Set docker password as env variable"
        run: |
          DOCKER_PASSWORD=$( cat secrets/gcr-auth-key-prod.json )
          echo "::set-env name=DOCKER_PASSWORD::${DOCKER_PASSWORD}"

      - name: "Stage 2: Login to Docker"
        uses: azure/docker-login@v1
        with:
          login-server: "https://gcr.io"
          username: "_json_key"
          password: "${DOCKER_PASSWORD}"

      - name: "Stage 2: Setup helm"
        run: |
          helm init --client-only
          helm repo add jupyterhub https://jupyterhub.github.io/helm-chart
          helm repo add jetstack https://charts.jetstack.io
          helm repo update
          (cd mybinder && helm dep up)

      - name: "Stage 3: Build images (if required)"
        run: |
          chartpress --commit-range ${{ github.base_ref }}..${{ github.head_ref }}

      - name: "Stage 4: Deploy to staging"
        run: |
          echo "python ./deploy.py staging staging"

      - name: "Stage 4: Verify staging works"
        uses: nick-invision/retry@v1
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: echo "py.test -vx -n 2 --binder-url=https://gke.staging.mybinder.org --hub-url=https://hub.gke.staging.mybinder.org"

      - name: "Stage 3: Post message to Grafana that deployment to production has started"
        run: |
          export PULL_REQUEST_ID=$(git log -1 --pretty=%B | head -n1 | sed 's/^.*#\([0-9]*\).*/\1/')
          export AUTHOR_NAME="$(git log  -1 --pretty=%aN)"
          export PULL_REQUEST_TITLE="$(git log --pretty=%B -1 | tail -n+3)"
          echo ${PULL_REQUEST_ID}
          echo ${AUTHOR_NAME}
          echo ${PULL_REQUEST_TITLE}

# source secrets/grafana-api-key
# python3 travis/post-grafana-annotation.py  \
#   --grafana-url https://grafana.mybinder.org \
#   --tag deployment-start \
#   "$(echo -en ${PULL_REQUEST_TITLE}\\n\\n${AUTHOR_NAME}: https://github.com/${TRAVIS_REPO_SLUG}/pull/${PULL_REQUEST_ID})"

  prod-deploy:
    # Previous job must have successfully completed for this job to execute
    needs: staging-deploy
    runs-on: ubuntu-latest
    strategy:
      matrix:
        federation_member: ["prod", "ovh", "turing"]
    steps:
      - name: Echo values
        run: |
          echo ${{ matrix.federation_member }}

      - name: "Stage 0: Checkout repo"
        uses: actions/checkout@v2

      - name: "Stage 0: Setup Python 3.6"
        uses: actions/setup-python@v1
        with:
          python-version: 3.6

      - name: "Stage 0: Cache pip dependencies"
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: "Stage 1: Install dependencies"
        run: |
          pip install --upgrade setuptools pip
          pip install --upgrade -r requirements.txt

      - name: "Stage 1: Install gcloud SDK"
        if: matrix.federation_member != 'turing'
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@master

      - name: "Stage 1: Install Azure CLI"
        if: matrix.federation_member == 'turing'
        run: |
          sudo apt-get update && sudo apt-get install ca-certificates curl apt-transport-https lsb-release gnupg && curl -sL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/microsoft.asc.gpg > /dev/null && AZ_REPO=$(lsb_release -cs) && echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" | sudo tee /etc/apt/sources.list.d/azure-cli.list && sudo apt-get update && sudo apt-get install azure-cli

      - name: "Stage 1: Install kubectl"
        uses: azure/setup-kubectl@v1

      - name: "Stage 1: Install helm"
        run: |
          curl -L https://storage.googleapis.com/kubernetes-helm/helm-${HELM_VERSION}-linux-amd64.tar.gz | tar --directory ${HOME} --extract --gzip --file -
          sudo mv ${HOME}/linux-amd64/helm /usr/local/bin/helm

      - name: "Stage 2: Unlock git-crypt secrets"
        uses: sliteteam/github-action-git-crypt-unlock@1.0.2
        env:
          GIT_CRYPT_KEY: ${{ secrets.GIT_CRYPT_KEY }}

      - name: "Stage 2: Setup helm"
        run: |
          helm init --client-only
          helm repo add jupyterhub https://jupyterhub.github.io/helm-chart
          helm repo add jetstack https://charts.jetstack.io
          helm repo update
          (cd mybinder && helm dep up)

      # I'm hoping since chartpress pushed the built image during Stage 3 of
      # staging-deploy job, that step can be skipped here.

      - name: "Stage 4: Deploy to ${{ matrix.federation_member }}"
        if: matrix.federation_member != 'prod'
        run: |
          echo "python ./deploy.py ${{ matrix.federation_member }} ${{ matrix.federation_member }}"

      - name: "Stage 4: Deploy to prod"
        if: matrix.federation_member == 'prod'
        run: |
          echo "python ./deploy.py prod prod-a"

      - name: "Stage 4: Verify prod works"
        if: matrix.federation_member == 'prod'
        uses: nick-invision/retry@v1
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: echo "py.test -vx -n 2 --binder-url=https://gke.mybinder.org --hub-url=https://hub.gke.mybinder.org"

      - name: "Stage 4: Verify OVH works"
        if: matrix.federation_member == 'ovh'
        uses: nick-invision/retry@v1
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: echo "py.test -vx -n 2 --binder-url=https://ovh.mybinder.org --hub-url=https://hub-binder.mybinder.ovh"

      - name: "Stage 4: Verify Turing works"
        if: matrix.federation_member == 'turing'
        uses: nick-invision/retry@v1
        with:
          timeout_minutes: 10
          max_attempts: 3
          command: echo "py.test -vx -n 2 --binder-url=https://turing.mybinder.org --hub-url=https://hub.mybinder.turing.ac.uk"
